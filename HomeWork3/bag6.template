#include "bag6.h"
#include <cassert>
#include <cstdlib>

namespace main_savitch_10
{
	template <class Item>
	void bst_remove_max(binary_tree_node<Item> *&root_ptr, Item &removed)
	{
		if (root_ptr->right() == NULL)
		{
			auto old_root = root_ptr;
			removed = old_root->data();
			root_ptr = root_ptr->left();
			delete old_root;
			return;
		}
		bst_remove_max(root_ptr->right(), removed);
	}

	template <class Item>
	bool bst_remove(binary_tree_node<Item> *&root_ptr, const Item &target)
	{
		binary_tree_node<Item> *oldroot_ptr;

		if (root_ptr == NULL)
		{ // Empty tree
			return false;
		}

		if (target < root_ptr->data())
		{ // Continue looking in the left subtree
			// Note: Any change made to root_ptr->left by this recursive
			// call will change the actual left pointer (because the return
			// value from the left() member function is a reference to the
			// actual left pointer.
			return bst_remove(root_ptr->left(), target);
		}

		if (target > root_ptr->data())
		{ // Continue looking in the right subtree
			// Note: Any change made to root_ptr->right by this recursive
			// call will change the actual right pointer (because the return
			// value from the right() member function is a reference to the
			// actual right pointer.
			return bst_remove(root_ptr->right(), target);
		}

		if (root_ptr->left() == NULL)
		{ // Target was found and there is no left subtree, so we can
			// remove this node, making the right child be the new root.
			oldroot_ptr = root_ptr;
			root_ptr = root_ptr->right();
			delete oldroot_ptr;
			return true;
		}
		bst_remove_max(root_ptr->left(), root_ptr->data());
		return true;
	}

	template <class Item>
	typename bag<Item>::size_type bst_remove_all(binary_tree_node<Item> *&root_ptr, const Item &target)
	{
		binary_tree_node<Item> *oldroot_ptr;

		if (root_ptr == NULL)
		{ // Empty tree
			return 1;
		}

		if (target < root_ptr->data())
		{ // Continue looking in the left subtree
			return bst_remove_all(root_ptr->left(), target);
		}

		if (target > root_ptr->data())
		{ // Continue looking in the right subtree
			return bst_remove_all(root_ptr->right(), target);
		}

		if (root_ptr->left() == nullptr)
		{ // Target was found and there is no left subtree, so we can
			// remove this node, making the right child be the new root.
			oldroot_ptr = root_ptr;
			root_ptr = root_ptr->right();
			delete oldroot_ptr;
			return 1;

			// Recursively remove any other nodes with the same value
		}
		bst_remove_max(root_ptr->left(), root_ptr->data());
		return 1 + bst_remove_all(root_ptr, target);
	}

	template <class Item>
	bag<Item>::bag(const bag<Item> &source)
	// Library facilities used: bintree.h
	{
		root_ptr = tree_copy(source.root_ptr);
	}

	template <class Item>
	bag<Item>::~bag()
	// Header file used: bintree.h
	{
		tree_clear(root_ptr);
	}

	template <class Item>
	typename bag<Item>::size_type bag<Item>::size() const
	// Header file used: bintree.h
	{
		return tree_size(root_ptr);
	}

	template <class Item>
	void bag<Item>::insert(const Item &entry)
	{
		binary_tree_node<Item> *cursor = root_ptr;

		if (root_ptr == NULL)
		{ // Add the first node of the binary search tree:
			root_ptr = new binary_tree_node<Item>(entry);
			return;
		}
		else
		{ // Move down the tree and add a new leaf:
			while (true)
			{
				if (entry < cursor->data())
				{
					if (cursor->left() == nullptr)
					{
						cursor->set_left() = new binary_tree_node<Item>(entry);
						return;
					}
					else
					{
						cursor = cursor->left();
					}
				}
				else if (entry > cursor->data())
				{
					if (cursor->right() == nullptr)
					{
						cursor->set_right() = new binary_tree_node<Item>(entry);
						return;
					}
					else
					{
						cursor = cursor->right();
					}
				}
			}
		}
	}

	template <class Item>
	typename bag<Item>::size_type bag<Item>::count(const Item &target) const
	{
		size_type answer = 0;
		binary_tree_node<Item> *cursor;

		cursor = root_ptr;
		if (cursor == nullptr)
			return answer;
		while (cursor->data() != target)
		{
			if (cursor->data() < target)
			{
				cursor = cursor->left();
				answer++;
			}
			else
			{
				cursor = cursor->right();
				answer++;
			}
		}
		return answer;
	}

	template <class Item>
	typename bag<Item>::size_type bag<Item>::erase(const Item &target)
	{
		return bst_remove_all(root_ptr, target);
	}

	template <class Item>
	bool bag<Item>::erase_one(const Item &target)
	{
		return bst_remove(root_ptr, target);
	}

	template <class Item>
	void bag<Item>::operator=(const bag<Item> &source)
	// Header file used: bintree.h
	{
		if (root_ptr == source.root_ptr)
			return;
		tree_clear(root_ptr);
		root_ptr = tree_copy(source.root_ptr);
	}

	template <class Item>
	void bag<Item>::operator+=(const bag<Item> &addend)
	{
		if (root_ptr == addend.root_ptr)
		{
			bag<Item> copy = addend;
			insert_all(copy.root_ptr);
		}
		else
			insert_all(addend.root_ptr);
	}

	template <class Item>
	bag<Item> operator+(const bag<Item> &b1, const bag<Item> &b2)
	{
		bag<Item> answer = b1;
		answer += b2;
		return answer;
	}

	template <class Item>
	void bag<Item>::insert_all(binary_tree_node<Item> *addroot_ptr)
	{
		if (addroot_ptr != NULL)
		{
			insert(addroot_ptr->data());
			insert_all(addroot_ptr->left());
			insert_all(addroot_ptr->right());
		}
	}
}
